#!env/bin/python3
import click
import os
import sys

from util.storage import load
from util.local_search_results import Results
import util.plot as plot
from util.misc import round_all_values


def __generate_file_name(base_name: str, n: int) -> str:
    return f"n={n}: {base_name}"


def __generate_intersection_heatmap(results: Results, directory: str, n: int, include_annotation: bool = True):
    file_name: str = __generate_file_name("intersection-heatmap", n)
    directory = plot.create_dir(directory, agressive=True)

    l_values, k_values, z = results.get_intersection_sizes(n)
    z = round_all_values(M=z, num_points=1)

    plot.graph_heatmap(
        x=l_values,
        y=k_values,
        z=z,
        directory=directory,
        file_name=file_name,
        min=0,
        max=results.planted_sizes[n],
        title=f"Size of Intersection with Planted Independent Set (n={n}, size={results.planted_sizes[n]}) \n after Local Optimization on Headstart Set",
        x_axis_title="Size of Headstart Set (l)",
        y_axis_title="Size of Intersection in Headstart Set (k)",
        color=plot.HeatMapColor.YELLOW_GREEN,
        include_annotation=include_annotation,
    )
    

def __generate_density_heatmap(results: Results, directory: str, n: int, include_annotation: bool = True):
    file_name: str = __generate_file_name("density-heatmap", n)
    directory = plot.create_dir(directory, agressive=True)

    l_values, k_values, z = results.get_densities(n)
    z = round_all_values(M=z, num_points=2)     # Round to two decimal points to make it readable

    plot.graph_heatmap(
        x=l_values,
        y=k_values,
        z=z,
        directory=directory,
        file_name=file_name,
        min=0,
        max=1,
        title=f"Density of set after local optimization (n={n}, size={results.planted_sizes[n]})",
        x_axis_title="Size of Headstart Set (l)",
        y_axis_title="Size of Intersection in Headstart Set (k)",
        color=plot.HeatMapColor.REDS,
        include_annotation=include_annotation,
    )


@click.group()
def run():
    pass


@run.command()
@click.option("--include-annotation", required=False, is_flag=True, default=False, help="Flag with whether or not to include annotations on the graph.")
@click.option("--intersection-heatmap", required=False, is_flag=True, default=False, help="2d heatmap of the final intersection size with planted ind set.")
@click.option("--density-heatmap", required=False, is_flag=True, default=False, help="2d heatmap of resulting density of set after local optimization.")
@click.option("--all", required=False, is_flag=True, default=False, help="Flag to graph all possible graphs.")
def graph_results(include_annotation, intersection_heatmap: bool, density_heatmap: bool, all: bool):
    # TODO: Fix graphing large values by showing a subset of the sizes rather than all of them
    # TODO: Fix the title, etc. to be a bit quicker.
    #? Verify the user has selected at least one graph
    if not any([intersection_heatmap, density_heatmap, all]):
        click.secho("There are no graphs selected. Please provide one as an argument.")
        sys.exit(0)

    #? Check whether they said all
    if all:
        intersection_heatmap = True
        density_heatmap = True

    #? Collect file name from user
    pickle_name = click.prompt('Please enter the file for the results.', type=str)
    if not pickle_name:
        click.secho("A file name must be provided", err=True)
        sys.exit(0)

    if not os.path.isfile(f"{pickle_name}.pkl"):
        click.secho(f"The file at {pickle_name}.pkl could not be found.", err=True)
        sys.exit(0)
    
    #? Load results information, error if we got weird loading
    results: Results = load(pickle_name)
    if not results:
        click.secho("Could not load results.", err=True)
        sys.exit(0)

    #? Prompt the user for the directory to store the graphs in
    # TODO: Move all these stupid prompts into arguments for testing / repeated usage
    results_directory = click.prompt("Please enter a directory to store the graphs in", type=str)


    #? Go through and graph the results
    for n in results.n_values:
        if intersection_heatmap:
            __generate_intersection_heatmap(results, results_directory,  n, include_annotation)
        if density_heatmap:
            __generate_density_heatmap(results, results_directory,  n, include_annotation)

@run.command()
@click.option("--results-name", required=False, help="The file to pull results from")
@click.option("--csv-name", required=False, help="The name of the file to save to ")
def generate_csv(results_name: str, csv_name: str):
    if not results_name:
        results_name = click.prompt("Results Name")
    if not csv_name:
        csv_name = click.prompt("CSV File Name")

    if not os.path.isfile(f"{results_name}.pkl"):
        click.secho(f"The file at {results_name}.pkl could not be found.", err=True)
        sys.exit(0)
    
    results: Results = load(results_name)
    if not results:
        click.secho("Coulf not load results.", err=True)
        sys.exit(0)

    # Put the relevant data into csv format
    for n in results.n_values:
        l_values, k_values, densities = results.get_densities(n)
        plot.write_2d_to_csv(k_values, l_values, densities, f"{csv_name}(n={n})")

        
    


if __name__ == "__main__":
    run()